// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"
	models "transaction_system/app/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionServiceI is a mock of TransactionServiceI interface.
type MockTransactionServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceIMockRecorder
}

// MockTransactionServiceIMockRecorder is the mock recorder for MockTransactionServiceI.
type MockTransactionServiceIMockRecorder struct {
	mock *MockTransactionServiceI
}

// NewMockTransactionServiceI creates a new mock instance.
func NewMockTransactionServiceI(ctrl *gomock.Controller) *MockTransactionServiceI {
	mock := &MockTransactionServiceI{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceI) EXPECT() *MockTransactionServiceIMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionServiceI) CreateTransaction(transaction models.Transaction) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceIMockRecorder) CreateTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionServiceI)(nil).CreateTransaction), transaction)
}

// GetTransactionIDsByType mocks base method.
func (m *MockTransactionServiceI) GetTransactionIDsByType(transactionType string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionIDsByType", transactionType)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionIDsByType indicates an expected call of GetTransactionIDsByType.
func (mr *MockTransactionServiceIMockRecorder) GetTransactionIDsByType(transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionIDsByType", reflect.TypeOf((*MockTransactionServiceI)(nil).GetTransactionIDsByType), transactionType)
}

// GetTransitiveSum mocks base method.
func (m *MockTransactionServiceI) GetTransitiveSum(transactionID uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitiveSum", transactionID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitiveSum indicates an expected call of GetTransitiveSum.
func (mr *MockTransactionServiceIMockRecorder) GetTransitiveSum(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitiveSum", reflect.TypeOf((*MockTransactionServiceI)(nil).GetTransitiveSum), transactionID)
}
