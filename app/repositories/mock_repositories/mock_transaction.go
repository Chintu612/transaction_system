// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "transaction_system/app/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepositoryI is a mock of TransactionRepositoryI interface.
type MockTransactionRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryIMockRecorder
}

// MockTransactionRepositoryIMockRecorder is the mock recorder for MockTransactionRepositoryI.
type MockTransactionRepositoryIMockRecorder struct {
	mock *MockTransactionRepositoryI
}

// NewMockTransactionRepositoryI creates a new mock instance.
func NewMockTransactionRepositoryI(ctrl *gomock.Controller) *MockTransactionRepositoryI {
	mock := &MockTransactionRepositoryI{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepositoryI) EXPECT() *MockTransactionRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionRepositoryI) Create(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepositoryIMockRecorder) Create(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepositoryI)(nil).Create), transaction)
}

// GetByID mocks base method.
func (m *MockTransactionRepositoryI) GetByID(transactionID uint) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionRepositoryIMockRecorder) GetByID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransactionRepositoryI)(nil).GetByID), transactionID)
}

// GetByType mocks base method.
func (m *MockTransactionRepositoryI) GetByType(transactionType string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", transactionType)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType.
func (mr *MockTransactionRepositoryIMockRecorder) GetByType(transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockTransactionRepositoryI)(nil).GetByType), transactionType)
}

// GetTransitiveSum mocks base method.
func (m *MockTransactionRepositoryI) GetTransitiveSum(transactionID uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitiveSum", transactionID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitiveSum indicates an expected call of GetTransitiveSum.
func (mr *MockTransactionRepositoryIMockRecorder) GetTransitiveSum(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitiveSum", reflect.TypeOf((*MockTransactionRepositoryI)(nil).GetTransitiveSum), transactionID)
}
